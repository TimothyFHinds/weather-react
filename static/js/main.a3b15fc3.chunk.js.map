{"version":3,"sources":["components/weather/weather.component.jsx","components/form/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minMaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","getCelsius","main","temp","weather","getIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","range","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a3b15fc3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n                <h1>{props.city}</h1>\r\n\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi display-1 ${props.weatherIcon}`}></i>\r\n                </h5>\r\n\r\n                {props.temp_celsius ? (\r\n                    <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\r\n                    ) : null}\r\n                \r\n                {minMaxTemp(props.temp_min, props.temp_max)}\r\n\r\n                <h4 className=\"py-3\">{props.description}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nfunction minMaxTemp(min, max) {\r\n    if(min && max) {\r\n        return (\r\n            <h3>\r\n                <span className=\"px-4\">\r\n                {min}&deg;\r\n                </span>\r\n                <span className=\"px-4\">\r\n                {max}&deg;\r\n                </span>\r\n            </h3>\r\n        );    \r\n    }\r\n    \r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport './form.style.css';\r\n\r\nconst Form = props => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div>{props.error ? error() : null}</div>\r\n            <form onSubmit={props.loadweather}>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 offset-md-2\">\r\n                        <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        name=\"city\" \r\n                        autoComplete=\"off\"\r\n                        placeholder=\"City\"></input>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-3\">\r\n                        <input \r\n                        type=\"text\" \r\n                        className=\"form-control\" \r\n                        name=\"country\" \r\n                        autoComplete=\"off\"\r\n                        placeholder=\"Country\"></input>\r\n                    </div>\r\n\r\n                    <div className=\"col-md-3 mt-md-0 text-md-left py-2\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nfunction error() {\r\n    return (\r\n        <div \r\n        className=\"alert alert-danger mx-5\"\r\n        role=\"alert\">\r\n            Please enter a city and country\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport Weather from './components/weather/weather.component';\nimport Form from './components/form/form.component';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\n\nconst APIKey = '47a0dea07d3f141d56ad04eac6c57169';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  getCelsius(temp) {\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  getFarenheit(temp) {\n    let far = Math.floor(temp * 1.8) + 32;\n    return far\n  }\n\n  getIcon(icons, range) {\n    switch(true) {\n      case range >= 200 && range <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm})\n        break;\n      case range >= 300 && range <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle})\n        break;\n      case range >= 500 && range <= 531:\n        this.setState({icon: this.weatherIcon.Rain})\n        break;\n      case range >= 600 && range <= 622:\n        this.setState({icon: this.weatherIcon.Snow})\n        break;\n      case range >= 701 && range <= 781:\n        this.setState({icon: this.weatherIcon.Atmosphere})\n        break;\n      case range === 800:\n        this.setState({icon: this.weatherIcon.Clear})\n        break;\n      case range >= 801 && range <=804:\n        this.setState({icon: this.weatherIcon.Clouds})\n        break;\n      default:\n        this.setState({icon: this.weatherIcon.Clouds})\n        \n           \n    }\n  }\n\n  getWeather = async (e) => {\n    \n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    if (city && country) {\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${APIKey}`)\n\n      const response = await api_call.json();\n\n      console.log(response);\n\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        celsius: this.getCelsius(response.main.temp),\n        temp_max: this.getCelsius(response.main.temp_max),\n        temp_min: this.getCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      this.getIcon(this.weatherIcon, response.weather[0].id);\n\n    } else {\n        this.setState({error: true});\n      }\n      \n    \n  };\n\n\n  state = {}\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Form \n          loadweather={this.getWeather}\n          error={this.state.error}\n        />\n\n        <Weather \n        city={this.state.city} \n        country={this.state.country} \n        temp_celsius={this.state.celsius}\n        temp_max={this.state.temp_max}\n        temp_min={this.state.temp_min}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}